/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as MeImport } from './routes/me';
import { Route as SearchIndexImport } from './routes/search/index';
import { Route as JobsIndexImport } from './routes/jobs/index';
import { Route as SearchLabelImport } from './routes/search/$label';
import { Route as ProfileUserIdImport } from './routes/profile/$userId';
import { Route as JobsJobIdImport } from './routes/jobs/$jobId';
import { Route as AuthVerifyEmailImport } from './routes/auth/verify-email';
import { Route as AuthSignupImport } from './routes/auth/signup';
import { Route as AuthNewPasswordImport } from './routes/auth/new-password';
import { Route as AuthLoginImport } from './routes/auth/login';

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')();
const PrivacyIndexLazyImport = createFileRoute('/privacy/')();
const GuidesIndexLazyImport = createFileRoute('/guides/')();
const ContactIndexLazyImport = createFileRoute('/contact/')();
const AnnouncementsIndexLazyImport = createFileRoute('/announcements/')();
const AboutIndexLazyImport = createFileRoute('/about/')();
const SearchCategoryLazyImport = createFileRoute('/search/category')();
const MeSummaryLazyImport = createFileRoute('/me/summary')();
const MeStandOutLazyImport = createFileRoute('/me/stand-out')();
const MeContactLazyImport = createFileRoute('/me/contact')();
const MeCharacteristicsLazyImport = createFileRoute('/me/characteristics')();
const MeBasicLazyImport = createFileRoute('/me/basic')();
const MeAreasLazyImport = createFileRoute('/me/areas')();
const JobsCreateLazyImport = createFileRoute('/jobs/create')();
const AuthSendVerificationLazyImport = createFileRoute(
  '/auth/send-verification'
)();
const AuthResetPasswordLazyImport = createFileRoute('/auth/reset-password')();
const AuthLogoutLazyImport = createFileRoute('/auth/logout')();
const AuthDeleteAccountLazyImport = createFileRoute('/auth/delete-account')();

// Create/Update Routes

const MeRoute = MeImport.update({
  path: '/me',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/me.lazy').then((d) => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route));

const PrivacyIndexLazyRoute = PrivacyIndexLazyImport.update({
  path: '/privacy/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy/index.lazy').then((d) => d.Route)
);

const GuidesIndexLazyRoute = GuidesIndexLazyImport.update({
  path: '/guides/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/guides/index.lazy').then((d) => d.Route));

const ContactIndexLazyRoute = ContactIndexLazyImport.update({
  path: '/contact/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/contact/index.lazy').then((d) => d.Route)
);

const AnnouncementsIndexLazyRoute = AnnouncementsIndexLazyImport.update({
  path: '/announcements/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/announcements/index.lazy').then((d) => d.Route)
);

const AboutIndexLazyRoute = AboutIndexLazyImport.update({
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route));

const SearchIndexRoute = SearchIndexImport.update({
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/search/index.lazy').then((d) => d.Route));

const JobsIndexRoute = JobsIndexImport.update({
  path: '/jobs/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs/index.lazy').then((d) => d.Route));

const SearchCategoryLazyRoute = SearchCategoryLazyImport.update({
  path: '/search/category',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/search/category.lazy').then((d) => d.Route)
);

const MeSummaryLazyRoute = MeSummaryLazyImport.update({
  path: '/summary',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/summary.lazy').then((d) => d.Route));

const MeStandOutLazyRoute = MeStandOutLazyImport.update({
  path: '/stand-out',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/stand-out.lazy').then((d) => d.Route));

const MeContactLazyRoute = MeContactLazyImport.update({
  path: '/contact',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/contact.lazy').then((d) => d.Route));

const MeCharacteristicsLazyRoute = MeCharacteristicsLazyImport.update({
  path: '/characteristics',
  getParentRoute: () => MeRoute,
} as any).lazy(() =>
  import('./routes/me/characteristics.lazy').then((d) => d.Route)
);

const MeBasicLazyRoute = MeBasicLazyImport.update({
  path: '/basic',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/basic.lazy').then((d) => d.Route));

const MeAreasLazyRoute = MeAreasLazyImport.update({
  path: '/areas',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/areas.lazy').then((d) => d.Route));

const JobsCreateLazyRoute = JobsCreateLazyImport.update({
  path: '/jobs/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs/create.lazy').then((d) => d.Route));

const AuthSendVerificationLazyRoute = AuthSendVerificationLazyImport.update({
  path: '/auth/send-verification',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/send-verification.lazy').then((d) => d.Route)
);

const AuthResetPasswordLazyRoute = AuthResetPasswordLazyImport.update({
  path: '/auth/reset-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/reset-password.lazy').then((d) => d.Route)
);

const AuthLogoutLazyRoute = AuthLogoutLazyImport.update({
  path: '/auth/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/logout.lazy').then((d) => d.Route));

const AuthDeleteAccountLazyRoute = AuthDeleteAccountLazyImport.update({
  path: '/auth/delete-account',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/delete-account.lazy').then((d) => d.Route)
);

const SearchLabelRoute = SearchLabelImport.update({
  path: '/search/$label',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/search/$label.lazy').then((d) => d.Route)
);

const ProfileUserIdRoute = ProfileUserIdImport.update({
  path: '/profile/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/$userId.lazy').then((d) => d.Route)
);

const JobsJobIdRoute = JobsJobIdImport.update({
  path: '/jobs/$jobId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs/$jobId.lazy').then((d) => d.Route));

const AuthVerifyEmailRoute = AuthVerifyEmailImport.update({
  path: '/auth/verify-email',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/verify-email.lazy').then((d) => d.Route)
);

const AuthSignupRoute = AuthSignupImport.update({
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/signup.lazy').then((d) => d.Route));

const AuthNewPasswordRoute = AuthNewPasswordImport.update({
  path: '/auth/new-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/new-password.lazy').then((d) => d.Route)
);

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/me': {
      preLoaderRoute: typeof MeImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/login': {
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/new-password': {
      preLoaderRoute: typeof AuthNewPasswordImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/signup': {
      preLoaderRoute: typeof AuthSignupImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/verify-email': {
      preLoaderRoute: typeof AuthVerifyEmailImport;
      parentRoute: typeof rootRoute;
    };
    '/jobs/$jobId': {
      preLoaderRoute: typeof JobsJobIdImport;
      parentRoute: typeof rootRoute;
    };
    '/profile/$userId': {
      preLoaderRoute: typeof ProfileUserIdImport;
      parentRoute: typeof rootRoute;
    };
    '/search/$label': {
      preLoaderRoute: typeof SearchLabelImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/delete-account': {
      preLoaderRoute: typeof AuthDeleteAccountLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/logout': {
      preLoaderRoute: typeof AuthLogoutLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/reset-password': {
      preLoaderRoute: typeof AuthResetPasswordLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/send-verification': {
      preLoaderRoute: typeof AuthSendVerificationLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/jobs/create': {
      preLoaderRoute: typeof JobsCreateLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/me/areas': {
      preLoaderRoute: typeof MeAreasLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/basic': {
      preLoaderRoute: typeof MeBasicLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/characteristics': {
      preLoaderRoute: typeof MeCharacteristicsLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/contact': {
      preLoaderRoute: typeof MeContactLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/stand-out': {
      preLoaderRoute: typeof MeStandOutLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/summary': {
      preLoaderRoute: typeof MeSummaryLazyImport;
      parentRoute: typeof MeImport;
    };
    '/search/category': {
      preLoaderRoute: typeof SearchCategoryLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/jobs/': {
      preLoaderRoute: typeof JobsIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/search/': {
      preLoaderRoute: typeof SearchIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/about/': {
      preLoaderRoute: typeof AboutIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/announcements/': {
      preLoaderRoute: typeof AnnouncementsIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/contact/': {
      preLoaderRoute: typeof ContactIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/guides/': {
      preLoaderRoute: typeof GuidesIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/privacy/': {
      preLoaderRoute: typeof PrivacyIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  MeRoute.addChildren([
    MeAreasLazyRoute,
    MeBasicLazyRoute,
    MeCharacteristicsLazyRoute,
    MeContactLazyRoute,
    MeStandOutLazyRoute,
    MeSummaryLazyRoute,
  ]),
  AuthLoginRoute,
  AuthNewPasswordRoute,
  AuthSignupRoute,
  AuthVerifyEmailRoute,
  JobsJobIdRoute,
  ProfileUserIdRoute,
  SearchLabelRoute,
  AuthDeleteAccountLazyRoute,
  AuthLogoutLazyRoute,
  AuthResetPasswordLazyRoute,
  AuthSendVerificationLazyRoute,
  JobsCreateLazyRoute,
  SearchCategoryLazyRoute,
  JobsIndexRoute,
  SearchIndexRoute,
  AboutIndexLazyRoute,
  AnnouncementsIndexLazyRoute,
  ContactIndexLazyRoute,
  GuidesIndexLazyRoute,
  PrivacyIndexLazyRoute,
]);

/* prettier-ignore-end */
