/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AlertsImport } from './routes/alerts';
import { Route as AuthLoginImport } from './routes/auth/login';
import { Route as AuthNewPasswordImport } from './routes/auth/new-password';
import { Route as AuthSignupImport } from './routes/auth/signup';
import { Route as AuthVerifyEmailImport } from './routes/auth/verify-email';
import { Route as JobsIndexImport } from './routes/jobs/index';
import { Route as JobsJobIdEditImport } from './routes/jobs_.$jobId.edit';
import { Route as MeImport } from './routes/me';
import { Route as ProfileUserIdImport } from './routes/profile/$userId';
import { Route as SearchLabelImport } from './routes/search/$label';
import { Route as SearchIndexImport } from './routes/search/index';

// Create Virtual Routes

const JobsLazyImport = createFileRoute('/jobs')();
const IndexLazyImport = createFileRoute('/')();
const PrivacyIndexLazyImport = createFileRoute('/privacy/')();
const GuidesIndexLazyImport = createFileRoute('/guides/')();
const ContactIndexLazyImport = createFileRoute('/contact/')();
const AnnouncementsIndexLazyImport = createFileRoute('/announcements/')();
const AboutIndexLazyImport = createFileRoute('/about/')();
const SearchCategoryLazyImport = createFileRoute('/search/category')();
const MeSummaryLazyImport = createFileRoute('/me/summary')();
const MeStandOutLazyImport = createFileRoute('/me/stand-out')();
const MeContactLazyImport = createFileRoute('/me/contact')();
const MeCharacteristicsLazyImport = createFileRoute('/me/characteristics')();
const MeBasicLazyImport = createFileRoute('/me/basic')();
const MeAreasLazyImport = createFileRoute('/me/areas')();
const JobsMeLazyImport = createFileRoute('/jobs/me')();
const JobsCreateLazyImport = createFileRoute('/jobs/create')();
const JobsJobIdLazyImport = createFileRoute('/jobs/$jobId')();
const AuthSendVerificationLazyImport = createFileRoute(
  '/auth/send-verification'
)();
const AuthResetPasswordLazyImport = createFileRoute('/auth/reset-password')();
const AuthLogoutLazyImport = createFileRoute('/auth/logout')();
const AuthDeleteAccountLazyImport = createFileRoute('/auth/delete-account')();

// Create/Update Routes

const JobsLazyRoute = JobsLazyImport.update({
  id: '/jobs',
  path: '/jobs',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs.lazy').then((d) => d.Route));

const MeRoute = MeImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/me.lazy').then((d) => d.Route));

const AlertsRoute = AlertsImport.update({
  id: '/alerts',
  path: '/alerts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/alerts.lazy').then((d) => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route));

const PrivacyIndexLazyRoute = PrivacyIndexLazyImport.update({
  id: '/privacy/',
  path: '/privacy/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy/index.lazy').then((d) => d.Route)
);

const GuidesIndexLazyRoute = GuidesIndexLazyImport.update({
  id: '/guides/',
  path: '/guides/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/guides/index.lazy').then((d) => d.Route));

const ContactIndexLazyRoute = ContactIndexLazyImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/contact/index.lazy').then((d) => d.Route)
);

const AnnouncementsIndexLazyRoute = AnnouncementsIndexLazyImport.update({
  id: '/announcements/',
  path: '/announcements/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/announcements/index.lazy').then((d) => d.Route)
);

const AboutIndexLazyRoute = AboutIndexLazyImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route));

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/search/index.lazy').then((d) => d.Route));

const JobsIndexRoute = JobsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => JobsLazyRoute,
} as any).lazy(() => import('./routes/jobs/index.lazy').then((d) => d.Route));

const SearchCategoryLazyRoute = SearchCategoryLazyImport.update({
  id: '/search/category',
  path: '/search/category',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/search/category.lazy').then((d) => d.Route)
);

const MeSummaryLazyRoute = MeSummaryLazyImport.update({
  id: '/summary',
  path: '/summary',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/summary.lazy').then((d) => d.Route));

const MeStandOutLazyRoute = MeStandOutLazyImport.update({
  id: '/stand-out',
  path: '/stand-out',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/stand-out.lazy').then((d) => d.Route));

const MeContactLazyRoute = MeContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/contact.lazy').then((d) => d.Route));

const MeCharacteristicsLazyRoute = MeCharacteristicsLazyImport.update({
  id: '/characteristics',
  path: '/characteristics',
  getParentRoute: () => MeRoute,
} as any).lazy(() =>
  import('./routes/me/characteristics.lazy').then((d) => d.Route)
);

const MeBasicLazyRoute = MeBasicLazyImport.update({
  id: '/basic',
  path: '/basic',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/basic.lazy').then((d) => d.Route));

const MeAreasLazyRoute = MeAreasLazyImport.update({
  id: '/areas',
  path: '/areas',
  getParentRoute: () => MeRoute,
} as any).lazy(() => import('./routes/me/areas.lazy').then((d) => d.Route));

const JobsMeLazyRoute = JobsMeLazyImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => JobsLazyRoute,
} as any).lazy(() => import('./routes/jobs/me.lazy').then((d) => d.Route));

const JobsCreateLazyRoute = JobsCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => JobsLazyRoute,
} as any).lazy(() => import('./routes/jobs/create.lazy').then((d) => d.Route));

const JobsJobIdLazyRoute = JobsJobIdLazyImport.update({
  id: '/$jobId',
  path: '/$jobId',
  getParentRoute: () => JobsLazyRoute,
} as any).lazy(() => import('./routes/jobs/$jobId.lazy').then((d) => d.Route));

const AuthSendVerificationLazyRoute = AuthSendVerificationLazyImport.update({
  id: '/auth/send-verification',
  path: '/auth/send-verification',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/send-verification.lazy').then((d) => d.Route)
);

const AuthResetPasswordLazyRoute = AuthResetPasswordLazyImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/reset-password.lazy').then((d) => d.Route)
);

const AuthLogoutLazyRoute = AuthLogoutLazyImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/logout.lazy').then((d) => d.Route));

const AuthDeleteAccountLazyRoute = AuthDeleteAccountLazyImport.update({
  id: '/auth/delete-account',
  path: '/auth/delete-account',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/delete-account.lazy').then((d) => d.Route)
);

const SearchLabelRoute = SearchLabelImport.update({
  id: '/search/$label',
  path: '/search/$label',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/search/$label.lazy').then((d) => d.Route)
);

const ProfileUserIdRoute = ProfileUserIdImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/$userId.lazy').then((d) => d.Route)
);

const AuthVerifyEmailRoute = AuthVerifyEmailImport.update({
  id: '/auth/verify-email',
  path: '/auth/verify-email',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/verify-email.lazy').then((d) => d.Route)
);

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/signup.lazy').then((d) => d.Route));

const AuthNewPasswordRoute = AuthNewPasswordImport.update({
  id: '/auth/new-password',
  path: '/auth/new-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/new-password.lazy').then((d) => d.Route)
);

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route));

const JobsJobIdEditRoute = JobsJobIdEditImport.update({
  id: '/jobs_/$jobId/edit',
  path: '/jobs/$jobId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/jobs_.$jobId.edit.lazy').then((d) => d.Route)
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/alerts': {
      id: '/alerts';
      path: '/alerts';
      fullPath: '/alerts';
      preLoaderRoute: typeof AlertsImport;
      parentRoute: typeof rootRoute;
    };
    '/me': {
      id: '/me';
      path: '/me';
      fullPath: '/me';
      preLoaderRoute: typeof MeImport;
      parentRoute: typeof rootRoute;
    };
    '/jobs': {
      id: '/jobs';
      path: '/jobs';
      fullPath: '/jobs';
      preLoaderRoute: typeof JobsLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/login': {
      id: '/auth/login';
      path: '/auth/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/new-password': {
      id: '/auth/new-password';
      path: '/auth/new-password';
      fullPath: '/auth/new-password';
      preLoaderRoute: typeof AuthNewPasswordImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/signup': {
      id: '/auth/signup';
      path: '/auth/signup';
      fullPath: '/auth/signup';
      preLoaderRoute: typeof AuthSignupImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/verify-email': {
      id: '/auth/verify-email';
      path: '/auth/verify-email';
      fullPath: '/auth/verify-email';
      preLoaderRoute: typeof AuthVerifyEmailImport;
      parentRoute: typeof rootRoute;
    };
    '/profile/$userId': {
      id: '/profile/$userId';
      path: '/profile/$userId';
      fullPath: '/profile/$userId';
      preLoaderRoute: typeof ProfileUserIdImport;
      parentRoute: typeof rootRoute;
    };
    '/search/$label': {
      id: '/search/$label';
      path: '/search/$label';
      fullPath: '/search/$label';
      preLoaderRoute: typeof SearchLabelImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/delete-account': {
      id: '/auth/delete-account';
      path: '/auth/delete-account';
      fullPath: '/auth/delete-account';
      preLoaderRoute: typeof AuthDeleteAccountLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/logout': {
      id: '/auth/logout';
      path: '/auth/logout';
      fullPath: '/auth/logout';
      preLoaderRoute: typeof AuthLogoutLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/reset-password': {
      id: '/auth/reset-password';
      path: '/auth/reset-password';
      fullPath: '/auth/reset-password';
      preLoaderRoute: typeof AuthResetPasswordLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/send-verification': {
      id: '/auth/send-verification';
      path: '/auth/send-verification';
      fullPath: '/auth/send-verification';
      preLoaderRoute: typeof AuthSendVerificationLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/jobs/$jobId': {
      id: '/jobs/$jobId';
      path: '/$jobId';
      fullPath: '/jobs/$jobId';
      preLoaderRoute: typeof JobsJobIdLazyImport;
      parentRoute: typeof JobsLazyImport;
    };
    '/jobs/create': {
      id: '/jobs/create';
      path: '/create';
      fullPath: '/jobs/create';
      preLoaderRoute: typeof JobsCreateLazyImport;
      parentRoute: typeof JobsLazyImport;
    };
    '/jobs/me': {
      id: '/jobs/me';
      path: '/me';
      fullPath: '/jobs/me';
      preLoaderRoute: typeof JobsMeLazyImport;
      parentRoute: typeof JobsLazyImport;
    };
    '/me/areas': {
      id: '/me/areas';
      path: '/areas';
      fullPath: '/me/areas';
      preLoaderRoute: typeof MeAreasLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/basic': {
      id: '/me/basic';
      path: '/basic';
      fullPath: '/me/basic';
      preLoaderRoute: typeof MeBasicLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/characteristics': {
      id: '/me/characteristics';
      path: '/characteristics';
      fullPath: '/me/characteristics';
      preLoaderRoute: typeof MeCharacteristicsLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/contact': {
      id: '/me/contact';
      path: '/contact';
      fullPath: '/me/contact';
      preLoaderRoute: typeof MeContactLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/stand-out': {
      id: '/me/stand-out';
      path: '/stand-out';
      fullPath: '/me/stand-out';
      preLoaderRoute: typeof MeStandOutLazyImport;
      parentRoute: typeof MeImport;
    };
    '/me/summary': {
      id: '/me/summary';
      path: '/summary';
      fullPath: '/me/summary';
      preLoaderRoute: typeof MeSummaryLazyImport;
      parentRoute: typeof MeImport;
    };
    '/search/category': {
      id: '/search/category';
      path: '/search/category';
      fullPath: '/search/category';
      preLoaderRoute: typeof SearchCategoryLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/jobs/': {
      id: '/jobs/';
      path: '/';
      fullPath: '/jobs/';
      preLoaderRoute: typeof JobsIndexImport;
      parentRoute: typeof JobsLazyImport;
    };
    '/search/': {
      id: '/search/';
      path: '/search';
      fullPath: '/search';
      preLoaderRoute: typeof SearchIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/about/': {
      id: '/about/';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/announcements/': {
      id: '/announcements/';
      path: '/announcements';
      fullPath: '/announcements';
      preLoaderRoute: typeof AnnouncementsIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/contact/': {
      id: '/contact/';
      path: '/contact';
      fullPath: '/contact';
      preLoaderRoute: typeof ContactIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/guides/': {
      id: '/guides/';
      path: '/guides';
      fullPath: '/guides';
      preLoaderRoute: typeof GuidesIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/privacy/': {
      id: '/privacy/';
      path: '/privacy';
      fullPath: '/privacy';
      preLoaderRoute: typeof PrivacyIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/jobs_/$jobId/edit': {
      id: '/jobs_/$jobId/edit';
      path: '/jobs/$jobId/edit';
      fullPath: '/jobs/$jobId/edit';
      preLoaderRoute: typeof JobsJobIdEditImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface MeRouteChildren {
  MeAreasLazyRoute: typeof MeAreasLazyRoute;
  MeBasicLazyRoute: typeof MeBasicLazyRoute;
  MeCharacteristicsLazyRoute: typeof MeCharacteristicsLazyRoute;
  MeContactLazyRoute: typeof MeContactLazyRoute;
  MeStandOutLazyRoute: typeof MeStandOutLazyRoute;
  MeSummaryLazyRoute: typeof MeSummaryLazyRoute;
}

const MeRouteChildren: MeRouteChildren = {
  MeAreasLazyRoute: MeAreasLazyRoute,
  MeBasicLazyRoute: MeBasicLazyRoute,
  MeCharacteristicsLazyRoute: MeCharacteristicsLazyRoute,
  MeContactLazyRoute: MeContactLazyRoute,
  MeStandOutLazyRoute: MeStandOutLazyRoute,
  MeSummaryLazyRoute: MeSummaryLazyRoute,
};

const MeRouteWithChildren = MeRoute._addFileChildren(MeRouteChildren);

interface JobsLazyRouteChildren {
  JobsJobIdLazyRoute: typeof JobsJobIdLazyRoute;
  JobsCreateLazyRoute: typeof JobsCreateLazyRoute;
  JobsMeLazyRoute: typeof JobsMeLazyRoute;
  JobsIndexRoute: typeof JobsIndexRoute;
}

const JobsLazyRouteChildren: JobsLazyRouteChildren = {
  JobsJobIdLazyRoute: JobsJobIdLazyRoute,
  JobsCreateLazyRoute: JobsCreateLazyRoute,
  JobsMeLazyRoute: JobsMeLazyRoute,
  JobsIndexRoute: JobsIndexRoute,
};

const JobsLazyRouteWithChildren = JobsLazyRoute._addFileChildren(
  JobsLazyRouteChildren
);

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '/alerts': typeof AlertsRoute;
  '/me': typeof MeRouteWithChildren;
  '/jobs': typeof JobsLazyRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/new-password': typeof AuthNewPasswordRoute;
  '/auth/signup': typeof AuthSignupRoute;
  '/auth/verify-email': typeof AuthVerifyEmailRoute;
  '/profile/$userId': typeof ProfileUserIdRoute;
  '/search/$label': typeof SearchLabelRoute;
  '/auth/delete-account': typeof AuthDeleteAccountLazyRoute;
  '/auth/logout': typeof AuthLogoutLazyRoute;
  '/auth/reset-password': typeof AuthResetPasswordLazyRoute;
  '/auth/send-verification': typeof AuthSendVerificationLazyRoute;
  '/jobs/$jobId': typeof JobsJobIdLazyRoute;
  '/jobs/create': typeof JobsCreateLazyRoute;
  '/jobs/me': typeof JobsMeLazyRoute;
  '/me/areas': typeof MeAreasLazyRoute;
  '/me/basic': typeof MeBasicLazyRoute;
  '/me/characteristics': typeof MeCharacteristicsLazyRoute;
  '/me/contact': typeof MeContactLazyRoute;
  '/me/stand-out': typeof MeStandOutLazyRoute;
  '/me/summary': typeof MeSummaryLazyRoute;
  '/search/category': typeof SearchCategoryLazyRoute;
  '/jobs/': typeof JobsIndexRoute;
  '/search': typeof SearchIndexRoute;
  '/about': typeof AboutIndexLazyRoute;
  '/announcements': typeof AnnouncementsIndexLazyRoute;
  '/contact': typeof ContactIndexLazyRoute;
  '/guides': typeof GuidesIndexLazyRoute;
  '/privacy': typeof PrivacyIndexLazyRoute;
  '/jobs/$jobId/edit': typeof JobsJobIdEditRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '/alerts': typeof AlertsRoute;
  '/me': typeof MeRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/new-password': typeof AuthNewPasswordRoute;
  '/auth/signup': typeof AuthSignupRoute;
  '/auth/verify-email': typeof AuthVerifyEmailRoute;
  '/profile/$userId': typeof ProfileUserIdRoute;
  '/search/$label': typeof SearchLabelRoute;
  '/auth/delete-account': typeof AuthDeleteAccountLazyRoute;
  '/auth/logout': typeof AuthLogoutLazyRoute;
  '/auth/reset-password': typeof AuthResetPasswordLazyRoute;
  '/auth/send-verification': typeof AuthSendVerificationLazyRoute;
  '/jobs/$jobId': typeof JobsJobIdLazyRoute;
  '/jobs/create': typeof JobsCreateLazyRoute;
  '/jobs/me': typeof JobsMeLazyRoute;
  '/me/areas': typeof MeAreasLazyRoute;
  '/me/basic': typeof MeBasicLazyRoute;
  '/me/characteristics': typeof MeCharacteristicsLazyRoute;
  '/me/contact': typeof MeContactLazyRoute;
  '/me/stand-out': typeof MeStandOutLazyRoute;
  '/me/summary': typeof MeSummaryLazyRoute;
  '/search/category': typeof SearchCategoryLazyRoute;
  '/jobs': typeof JobsIndexRoute;
  '/search': typeof SearchIndexRoute;
  '/about': typeof AboutIndexLazyRoute;
  '/announcements': typeof AnnouncementsIndexLazyRoute;
  '/contact': typeof ContactIndexLazyRoute;
  '/guides': typeof GuidesIndexLazyRoute;
  '/privacy': typeof PrivacyIndexLazyRoute;
  '/jobs/$jobId/edit': typeof JobsJobIdEditRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexLazyRoute;
  '/alerts': typeof AlertsRoute;
  '/me': typeof MeRouteWithChildren;
  '/jobs': typeof JobsLazyRouteWithChildren;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/new-password': typeof AuthNewPasswordRoute;
  '/auth/signup': typeof AuthSignupRoute;
  '/auth/verify-email': typeof AuthVerifyEmailRoute;
  '/profile/$userId': typeof ProfileUserIdRoute;
  '/search/$label': typeof SearchLabelRoute;
  '/auth/delete-account': typeof AuthDeleteAccountLazyRoute;
  '/auth/logout': typeof AuthLogoutLazyRoute;
  '/auth/reset-password': typeof AuthResetPasswordLazyRoute;
  '/auth/send-verification': typeof AuthSendVerificationLazyRoute;
  '/jobs/$jobId': typeof JobsJobIdLazyRoute;
  '/jobs/create': typeof JobsCreateLazyRoute;
  '/jobs/me': typeof JobsMeLazyRoute;
  '/me/areas': typeof MeAreasLazyRoute;
  '/me/basic': typeof MeBasicLazyRoute;
  '/me/characteristics': typeof MeCharacteristicsLazyRoute;
  '/me/contact': typeof MeContactLazyRoute;
  '/me/stand-out': typeof MeStandOutLazyRoute;
  '/me/summary': typeof MeSummaryLazyRoute;
  '/search/category': typeof SearchCategoryLazyRoute;
  '/jobs/': typeof JobsIndexRoute;
  '/search/': typeof SearchIndexRoute;
  '/about/': typeof AboutIndexLazyRoute;
  '/announcements/': typeof AnnouncementsIndexLazyRoute;
  '/contact/': typeof ContactIndexLazyRoute;
  '/guides/': typeof GuidesIndexLazyRoute;
  '/privacy/': typeof PrivacyIndexLazyRoute;
  '/jobs_/$jobId/edit': typeof JobsJobIdEditRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/alerts'
    | '/me'
    | '/jobs'
    | '/auth/login'
    | '/auth/new-password'
    | '/auth/signup'
    | '/auth/verify-email'
    | '/profile/$userId'
    | '/search/$label'
    | '/auth/delete-account'
    | '/auth/logout'
    | '/auth/reset-password'
    | '/auth/send-verification'
    | '/jobs/$jobId'
    | '/jobs/create'
    | '/jobs/me'
    | '/me/areas'
    | '/me/basic'
    | '/me/characteristics'
    | '/me/contact'
    | '/me/stand-out'
    | '/me/summary'
    | '/search/category'
    | '/jobs/'
    | '/search'
    | '/about'
    | '/announcements'
    | '/contact'
    | '/guides'
    | '/privacy'
    | '/jobs/$jobId/edit';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/alerts'
    | '/me'
    | '/auth/login'
    | '/auth/new-password'
    | '/auth/signup'
    | '/auth/verify-email'
    | '/profile/$userId'
    | '/search/$label'
    | '/auth/delete-account'
    | '/auth/logout'
    | '/auth/reset-password'
    | '/auth/send-verification'
    | '/jobs/$jobId'
    | '/jobs/create'
    | '/jobs/me'
    | '/me/areas'
    | '/me/basic'
    | '/me/characteristics'
    | '/me/contact'
    | '/me/stand-out'
    | '/me/summary'
    | '/search/category'
    | '/jobs'
    | '/search'
    | '/about'
    | '/announcements'
    | '/contact'
    | '/guides'
    | '/privacy'
    | '/jobs/$jobId/edit';
  id:
    | '__root__'
    | '/'
    | '/alerts'
    | '/me'
    | '/jobs'
    | '/auth/login'
    | '/auth/new-password'
    | '/auth/signup'
    | '/auth/verify-email'
    | '/profile/$userId'
    | '/search/$label'
    | '/auth/delete-account'
    | '/auth/logout'
    | '/auth/reset-password'
    | '/auth/send-verification'
    | '/jobs/$jobId'
    | '/jobs/create'
    | '/jobs/me'
    | '/me/areas'
    | '/me/basic'
    | '/me/characteristics'
    | '/me/contact'
    | '/me/stand-out'
    | '/me/summary'
    | '/search/category'
    | '/jobs/'
    | '/search/'
    | '/about/'
    | '/announcements/'
    | '/contact/'
    | '/guides/'
    | '/privacy/'
    | '/jobs_/$jobId/edit';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  AlertsRoute: typeof AlertsRoute;
  MeRoute: typeof MeRouteWithChildren;
  JobsLazyRoute: typeof JobsLazyRouteWithChildren;
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthNewPasswordRoute: typeof AuthNewPasswordRoute;
  AuthSignupRoute: typeof AuthSignupRoute;
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute;
  ProfileUserIdRoute: typeof ProfileUserIdRoute;
  SearchLabelRoute: typeof SearchLabelRoute;
  AuthDeleteAccountLazyRoute: typeof AuthDeleteAccountLazyRoute;
  AuthLogoutLazyRoute: typeof AuthLogoutLazyRoute;
  AuthResetPasswordLazyRoute: typeof AuthResetPasswordLazyRoute;
  AuthSendVerificationLazyRoute: typeof AuthSendVerificationLazyRoute;
  SearchCategoryLazyRoute: typeof SearchCategoryLazyRoute;
  SearchIndexRoute: typeof SearchIndexRoute;
  AboutIndexLazyRoute: typeof AboutIndexLazyRoute;
  AnnouncementsIndexLazyRoute: typeof AnnouncementsIndexLazyRoute;
  ContactIndexLazyRoute: typeof ContactIndexLazyRoute;
  GuidesIndexLazyRoute: typeof GuidesIndexLazyRoute;
  PrivacyIndexLazyRoute: typeof PrivacyIndexLazyRoute;
  JobsJobIdEditRoute: typeof JobsJobIdEditRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AlertsRoute: AlertsRoute,
  MeRoute: MeRouteWithChildren,
  JobsLazyRoute: JobsLazyRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthNewPasswordRoute: AuthNewPasswordRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
  ProfileUserIdRoute: ProfileUserIdRoute,
  SearchLabelRoute: SearchLabelRoute,
  AuthDeleteAccountLazyRoute: AuthDeleteAccountLazyRoute,
  AuthLogoutLazyRoute: AuthLogoutLazyRoute,
  AuthResetPasswordLazyRoute: AuthResetPasswordLazyRoute,
  AuthSendVerificationLazyRoute: AuthSendVerificationLazyRoute,
  SearchCategoryLazyRoute: SearchCategoryLazyRoute,
  SearchIndexRoute: SearchIndexRoute,
  AboutIndexLazyRoute: AboutIndexLazyRoute,
  AnnouncementsIndexLazyRoute: AnnouncementsIndexLazyRoute,
  ContactIndexLazyRoute: ContactIndexLazyRoute,
  GuidesIndexLazyRoute: GuidesIndexLazyRoute,
  PrivacyIndexLazyRoute: PrivacyIndexLazyRoute,
  JobsJobIdEditRoute: JobsJobIdEditRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/alerts",
        "/me",
        "/jobs",
        "/auth/login",
        "/auth/new-password",
        "/auth/signup",
        "/auth/verify-email",
        "/profile/$userId",
        "/search/$label",
        "/auth/delete-account",
        "/auth/logout",
        "/auth/reset-password",
        "/auth/send-verification",
        "/search/category",
        "/search/",
        "/about/",
        "/announcements/",
        "/contact/",
        "/guides/",
        "/privacy/",
        "/jobs_/$jobId/edit"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/alerts": {
      "filePath": "alerts.tsx"
    },
    "/me": {
      "filePath": "me.tsx",
      "children": [
        "/me/areas",
        "/me/basic",
        "/me/characteristics",
        "/me/contact",
        "/me/stand-out",
        "/me/summary"
      ]
    },
    "/jobs": {
      "filePath": "jobs.lazy.tsx",
      "children": [
        "/jobs/$jobId",
        "/jobs/create",
        "/jobs/me",
        "/jobs/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/new-password": {
      "filePath": "auth/new-password.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/auth/verify-email": {
      "filePath": "auth/verify-email.tsx"
    },
    "/profile/$userId": {
      "filePath": "profile/$userId.tsx"
    },
    "/search/$label": {
      "filePath": "search/$label.tsx"
    },
    "/auth/delete-account": {
      "filePath": "auth/delete-account.lazy.tsx"
    },
    "/auth/logout": {
      "filePath": "auth/logout.lazy.tsx"
    },
    "/auth/reset-password": {
      "filePath": "auth/reset-password.lazy.tsx"
    },
    "/auth/send-verification": {
      "filePath": "auth/send-verification.lazy.tsx"
    },
    "/jobs/$jobId": {
      "filePath": "jobs/$jobId.lazy.tsx",
      "parent": "/jobs"
    },
    "/jobs/create": {
      "filePath": "jobs/create.lazy.tsx",
      "parent": "/jobs"
    },
    "/jobs/me": {
      "filePath": "jobs/me.lazy.tsx",
      "parent": "/jobs"
    },
    "/me/areas": {
      "filePath": "me/areas.lazy.tsx",
      "parent": "/me"
    },
    "/me/basic": {
      "filePath": "me/basic.lazy.tsx",
      "parent": "/me"
    },
    "/me/characteristics": {
      "filePath": "me/characteristics.lazy.tsx",
      "parent": "/me"
    },
    "/me/contact": {
      "filePath": "me/contact.lazy.tsx",
      "parent": "/me"
    },
    "/me/stand-out": {
      "filePath": "me/stand-out.lazy.tsx",
      "parent": "/me"
    },
    "/me/summary": {
      "filePath": "me/summary.lazy.tsx",
      "parent": "/me"
    },
    "/search/category": {
      "filePath": "search/category.lazy.tsx"
    },
    "/jobs/": {
      "filePath": "jobs/index.tsx",
      "parent": "/jobs"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/about/": {
      "filePath": "about/index.lazy.tsx"
    },
    "/announcements/": {
      "filePath": "announcements/index.lazy.tsx"
    },
    "/contact/": {
      "filePath": "contact/index.lazy.tsx"
    },
    "/guides/": {
      "filePath": "guides/index.lazy.tsx"
    },
    "/privacy/": {
      "filePath": "privacy/index.lazy.tsx"
    },
    "/jobs_/$jobId/edit": {
      "filePath": "jobs_.$jobId.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
